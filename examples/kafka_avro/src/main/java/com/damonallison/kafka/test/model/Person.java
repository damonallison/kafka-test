/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.damonallison.kafka.test.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Person extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Person\",\"namespace\":\"com.damonallison.kafka.test.model\",\"fields\":[{\"name\":\"first_name\",\"type\":\"string\",\"doc\":\"First name\"},{\"name\":\"last_name\",\"type\":\"string\",\"doc\":\"Last name\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** First name */
  @Deprecated public java.lang.CharSequence first_name;
  /** Last name */
  @Deprecated public java.lang.CharSequence last_name;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Person() {}

  /**
   * All-args constructor.
   */
  public Person(java.lang.CharSequence first_name, java.lang.CharSequence last_name) {
    this.first_name = first_name;
    this.last_name = last_name;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return first_name;
    case 1: return last_name;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: first_name = (java.lang.CharSequence)value$; break;
    case 1: last_name = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'first_name' field.
   * First name   */
  public java.lang.CharSequence getFirstName() {
    return first_name;
  }

  /**
   * Sets the value of the 'first_name' field.
   * First name   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.first_name = value;
  }

  /**
   * Gets the value of the 'last_name' field.
   * Last name   */
  public java.lang.CharSequence getLastName() {
    return last_name;
  }

  /**
   * Sets the value of the 'last_name' field.
   * Last name   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.last_name = value;
  }

  /** Creates a new Person RecordBuilder */
  public static com.damonallison.kafka.test.model.Person.Builder newBuilder() {
    return new com.damonallison.kafka.test.model.Person.Builder();
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Builder */
  public static com.damonallison.kafka.test.model.Person.Builder newBuilder(com.damonallison.kafka.test.model.Person.Builder other) {
    return new com.damonallison.kafka.test.model.Person.Builder(other);
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Person instance */
  public static com.damonallison.kafka.test.model.Person.Builder newBuilder(com.damonallison.kafka.test.model.Person other) {
    return new com.damonallison.kafka.test.model.Person.Builder(other);
  }
  
  /**
   * RecordBuilder for Person instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Person>
    implements org.apache.avro.data.RecordBuilder<Person> {

    private java.lang.CharSequence first_name;
    private java.lang.CharSequence last_name;

    /** Creates a new Builder */
    private Builder() {
      super(com.damonallison.kafka.test.model.Person.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.damonallison.kafka.test.model.Person.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.first_name)) {
        this.first_name = data().deepCopy(fields()[0].schema(), other.first_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.last_name)) {
        this.last_name = data().deepCopy(fields()[1].schema(), other.last_name);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Person instance */
    private Builder(com.damonallison.kafka.test.model.Person other) {
            super(com.damonallison.kafka.test.model.Person.SCHEMA$);
      if (isValidValue(fields()[0], other.first_name)) {
        this.first_name = data().deepCopy(fields()[0].schema(), other.first_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.last_name)) {
        this.last_name = data().deepCopy(fields()[1].schema(), other.last_name);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'first_name' field */
    public java.lang.CharSequence getFirstName() {
      return first_name;
    }
    
    /** Sets the value of the 'first_name' field */
    public com.damonallison.kafka.test.model.Person.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.first_name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'first_name' field has been set */
    public boolean hasFirstName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'first_name' field */
    public com.damonallison.kafka.test.model.Person.Builder clearFirstName() {
      first_name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'last_name' field */
    public java.lang.CharSequence getLastName() {
      return last_name;
    }
    
    /** Sets the value of the 'last_name' field */
    public com.damonallison.kafka.test.model.Person.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.last_name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'last_name' field has been set */
    public boolean hasLastName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'last_name' field */
    public com.damonallison.kafka.test.model.Person.Builder clearLastName() {
      last_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Person build() {
      try {
        Person record = new Person();
        record.first_name = fieldSetFlags()[0] ? this.first_name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.last_name = fieldSetFlags()[1] ? this.last_name : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
